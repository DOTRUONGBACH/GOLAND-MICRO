// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mock_project/ent/booking"
	"mock_project/ent/customer"
	"mock_project/ent/flight"
	"mock_project/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BookingUpdate is the builder for updating Booking entities.
type BookingUpdate struct {
	config
	hooks    []Hook
	mutation *BookingMutation
}

// Where appends a list predicates to the BookingUpdate builder.
func (bu *BookingUpdate) Where(ps ...predicate.Booking) *BookingUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetTotalCost sets the "total_cost" field.
func (bu *BookingUpdate) SetTotalCost(f float64) *BookingUpdate {
	bu.mutation.ResetTotalCost()
	bu.mutation.SetTotalCost(f)
	return bu
}

// AddTotalCost adds f to the "total_cost" field.
func (bu *BookingUpdate) AddTotalCost(f float64) *BookingUpdate {
	bu.mutation.AddTotalCost(f)
	return bu
}

// SetTotalTicket sets the "total_ticket" field.
func (bu *BookingUpdate) SetTotalTicket(i int) *BookingUpdate {
	bu.mutation.ResetTotalTicket()
	bu.mutation.SetTotalTicket(i)
	return bu
}

// SetNillableTotalTicket sets the "total_ticket" field if the given value is not nil.
func (bu *BookingUpdate) SetNillableTotalTicket(i *int) *BookingUpdate {
	if i != nil {
		bu.SetTotalTicket(*i)
	}
	return bu
}

// AddTotalTicket adds i to the "total_ticket" field.
func (bu *BookingUpdate) AddTotalTicket(i int) *BookingUpdate {
	bu.mutation.AddTotalTicket(i)
	return bu
}

// SetStatus sets the "status" field.
func (bu *BookingUpdate) SetStatus(b booking.Status) *BookingUpdate {
	bu.mutation.SetStatus(b)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BookingUpdate) SetUpdatedAt(t time.Time) *BookingUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetBookingFlightID sets the "booking_flight" edge to the Flight entity by ID.
func (bu *BookingUpdate) SetBookingFlightID(id uuid.UUID) *BookingUpdate {
	bu.mutation.SetBookingFlightID(id)
	return bu
}

// SetNillableBookingFlightID sets the "booking_flight" edge to the Flight entity by ID if the given value is not nil.
func (bu *BookingUpdate) SetNillableBookingFlightID(id *uuid.UUID) *BookingUpdate {
	if id != nil {
		bu = bu.SetBookingFlightID(*id)
	}
	return bu
}

// SetBookingFlight sets the "booking_flight" edge to the Flight entity.
func (bu *BookingUpdate) SetBookingFlight(f *Flight) *BookingUpdate {
	return bu.SetBookingFlightID(f.ID)
}

// SetBookingOwnerID sets the "booking_owner" edge to the Customer entity by ID.
func (bu *BookingUpdate) SetBookingOwnerID(id uuid.UUID) *BookingUpdate {
	bu.mutation.SetBookingOwnerID(id)
	return bu
}

// SetNillableBookingOwnerID sets the "booking_owner" edge to the Customer entity by ID if the given value is not nil.
func (bu *BookingUpdate) SetNillableBookingOwnerID(id *uuid.UUID) *BookingUpdate {
	if id != nil {
		bu = bu.SetBookingOwnerID(*id)
	}
	return bu
}

// SetBookingOwner sets the "booking_owner" edge to the Customer entity.
func (bu *BookingUpdate) SetBookingOwner(c *Customer) *BookingUpdate {
	return bu.SetBookingOwnerID(c.ID)
}

// Mutation returns the BookingMutation object of the builder.
func (bu *BookingUpdate) Mutation() *BookingMutation {
	return bu.mutation
}

// ClearBookingFlight clears the "booking_flight" edge to the Flight entity.
func (bu *BookingUpdate) ClearBookingFlight() *BookingUpdate {
	bu.mutation.ClearBookingFlight()
	return bu
}

// ClearBookingOwner clears the "booking_owner" edge to the Customer entity.
func (bu *BookingUpdate) ClearBookingOwner() *BookingUpdate {
	bu.mutation.ClearBookingOwner()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BookingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	bu.defaults()
	if len(bu.hooks) == 0 {
		if err = bu.check(); err != nil {
			return 0, err
		}
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bu.check(); err != nil {
				return 0, err
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			if bu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BookingUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BookingUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BookingUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BookingUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := booking.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BookingUpdate) check() error {
	if v, ok := bu.mutation.TotalCost(); ok {
		if err := booking.TotalCostValidator(v); err != nil {
			return &ValidationError{Name: "total_cost", err: fmt.Errorf(`ent: validator failed for field "Booking.total_cost": %w`, err)}
		}
	}
	if v, ok := bu.mutation.TotalTicket(); ok {
		if err := booking.TotalTicketValidator(v); err != nil {
			return &ValidationError{Name: "total_ticket", err: fmt.Errorf(`ent: validator failed for field "Booking.total_ticket": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Status(); ok {
		if err := booking.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Booking.status": %w`, err)}
		}
	}
	return nil
}

func (bu *BookingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   booking.Table,
			Columns: booking.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: booking.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.TotalCost(); ok {
		_spec.SetField(booking.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedTotalCost(); ok {
		_spec.AddField(booking.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.TotalTicket(); ok {
		_spec.SetField(booking.FieldTotalTicket, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedTotalTicket(); ok {
		_spec.AddField(booking.FieldTotalTicket, field.TypeInt, value)
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.SetField(booking.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(booking.FieldUpdatedAt, field.TypeTime, value)
	}
	if bu.mutation.BookingFlightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.BookingFlightTable,
			Columns: []string{booking.BookingFlightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BookingFlightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.BookingFlightTable,
			Columns: []string{booking.BookingFlightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BookingOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.BookingOwnerTable,
			Columns: []string{booking.BookingOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BookingOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.BookingOwnerTable,
			Columns: []string{booking.BookingOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{booking.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// BookingUpdateOne is the builder for updating a single Booking entity.
type BookingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookingMutation
}

// SetTotalCost sets the "total_cost" field.
func (buo *BookingUpdateOne) SetTotalCost(f float64) *BookingUpdateOne {
	buo.mutation.ResetTotalCost()
	buo.mutation.SetTotalCost(f)
	return buo
}

// AddTotalCost adds f to the "total_cost" field.
func (buo *BookingUpdateOne) AddTotalCost(f float64) *BookingUpdateOne {
	buo.mutation.AddTotalCost(f)
	return buo
}

// SetTotalTicket sets the "total_ticket" field.
func (buo *BookingUpdateOne) SetTotalTicket(i int) *BookingUpdateOne {
	buo.mutation.ResetTotalTicket()
	buo.mutation.SetTotalTicket(i)
	return buo
}

// SetNillableTotalTicket sets the "total_ticket" field if the given value is not nil.
func (buo *BookingUpdateOne) SetNillableTotalTicket(i *int) *BookingUpdateOne {
	if i != nil {
		buo.SetTotalTicket(*i)
	}
	return buo
}

// AddTotalTicket adds i to the "total_ticket" field.
func (buo *BookingUpdateOne) AddTotalTicket(i int) *BookingUpdateOne {
	buo.mutation.AddTotalTicket(i)
	return buo
}

// SetStatus sets the "status" field.
func (buo *BookingUpdateOne) SetStatus(b booking.Status) *BookingUpdateOne {
	buo.mutation.SetStatus(b)
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BookingUpdateOne) SetUpdatedAt(t time.Time) *BookingUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetBookingFlightID sets the "booking_flight" edge to the Flight entity by ID.
func (buo *BookingUpdateOne) SetBookingFlightID(id uuid.UUID) *BookingUpdateOne {
	buo.mutation.SetBookingFlightID(id)
	return buo
}

// SetNillableBookingFlightID sets the "booking_flight" edge to the Flight entity by ID if the given value is not nil.
func (buo *BookingUpdateOne) SetNillableBookingFlightID(id *uuid.UUID) *BookingUpdateOne {
	if id != nil {
		buo = buo.SetBookingFlightID(*id)
	}
	return buo
}

// SetBookingFlight sets the "booking_flight" edge to the Flight entity.
func (buo *BookingUpdateOne) SetBookingFlight(f *Flight) *BookingUpdateOne {
	return buo.SetBookingFlightID(f.ID)
}

// SetBookingOwnerID sets the "booking_owner" edge to the Customer entity by ID.
func (buo *BookingUpdateOne) SetBookingOwnerID(id uuid.UUID) *BookingUpdateOne {
	buo.mutation.SetBookingOwnerID(id)
	return buo
}

// SetNillableBookingOwnerID sets the "booking_owner" edge to the Customer entity by ID if the given value is not nil.
func (buo *BookingUpdateOne) SetNillableBookingOwnerID(id *uuid.UUID) *BookingUpdateOne {
	if id != nil {
		buo = buo.SetBookingOwnerID(*id)
	}
	return buo
}

// SetBookingOwner sets the "booking_owner" edge to the Customer entity.
func (buo *BookingUpdateOne) SetBookingOwner(c *Customer) *BookingUpdateOne {
	return buo.SetBookingOwnerID(c.ID)
}

// Mutation returns the BookingMutation object of the builder.
func (buo *BookingUpdateOne) Mutation() *BookingMutation {
	return buo.mutation
}

// ClearBookingFlight clears the "booking_flight" edge to the Flight entity.
func (buo *BookingUpdateOne) ClearBookingFlight() *BookingUpdateOne {
	buo.mutation.ClearBookingFlight()
	return buo
}

// ClearBookingOwner clears the "booking_owner" edge to the Customer entity.
func (buo *BookingUpdateOne) ClearBookingOwner() *BookingUpdateOne {
	buo.mutation.ClearBookingOwner()
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BookingUpdateOne) Select(field string, fields ...string) *BookingUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Booking entity.
func (buo *BookingUpdateOne) Save(ctx context.Context) (*Booking, error) {
	var (
		err  error
		node *Booking
	)
	buo.defaults()
	if len(buo.hooks) == 0 {
		if err = buo.check(); err != nil {
			return nil, err
		}
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buo.check(); err != nil {
				return nil, err
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			if buo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, buo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Booking)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BookingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BookingUpdateOne) SaveX(ctx context.Context) *Booking {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BookingUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BookingUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BookingUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := booking.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BookingUpdateOne) check() error {
	if v, ok := buo.mutation.TotalCost(); ok {
		if err := booking.TotalCostValidator(v); err != nil {
			return &ValidationError{Name: "total_cost", err: fmt.Errorf(`ent: validator failed for field "Booking.total_cost": %w`, err)}
		}
	}
	if v, ok := buo.mutation.TotalTicket(); ok {
		if err := booking.TotalTicketValidator(v); err != nil {
			return &ValidationError{Name: "total_ticket", err: fmt.Errorf(`ent: validator failed for field "Booking.total_ticket": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Status(); ok {
		if err := booking.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Booking.status": %w`, err)}
		}
	}
	return nil
}

func (buo *BookingUpdateOne) sqlSave(ctx context.Context) (_node *Booking, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   booking.Table,
			Columns: booking.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: booking.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Booking.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, booking.FieldID)
		for _, f := range fields {
			if !booking.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != booking.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.TotalCost(); ok {
		_spec.SetField(booking.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedTotalCost(); ok {
		_spec.AddField(booking.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.TotalTicket(); ok {
		_spec.SetField(booking.FieldTotalTicket, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedTotalTicket(); ok {
		_spec.AddField(booking.FieldTotalTicket, field.TypeInt, value)
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.SetField(booking.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(booking.FieldUpdatedAt, field.TypeTime, value)
	}
	if buo.mutation.BookingFlightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.BookingFlightTable,
			Columns: []string{booking.BookingFlightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BookingFlightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.BookingFlightTable,
			Columns: []string{booking.BookingFlightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flight.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BookingOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.BookingOwnerTable,
			Columns: []string{booking.BookingOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BookingOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.BookingOwnerTable,
			Columns: []string{booking.BookingOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Booking{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{booking.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
