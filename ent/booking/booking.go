// Code generated by ent, DO NOT EDIT.

package booking

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the booking type in the database.
	Label = "booking"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTotalCost holds the string denoting the total_cost field in the database.
	FieldTotalCost = "total_cost"
	// FieldTotalTicket holds the string denoting the total_ticket field in the database.
	FieldTotalTicket = "total_ticket"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeBookingFlight holds the string denoting the booking_flight edge name in mutations.
	EdgeBookingFlight = "booking_flight"
	// EdgeBookingOwner holds the string denoting the booking_owner edge name in mutations.
	EdgeBookingOwner = "booking_owner"
	// Table holds the table name of the booking in the database.
	Table = "bookings"
	// BookingFlightTable is the table that holds the booking_flight relation/edge.
	BookingFlightTable = "bookings"
	// BookingFlightInverseTable is the table name for the Flight entity.
	// It exists in this package in order to avoid circular dependency with the "flight" package.
	BookingFlightInverseTable = "flights"
	// BookingFlightColumn is the table column denoting the booking_flight relation/edge.
	BookingFlightColumn = "flight_belongs_to"
	// BookingOwnerTable is the table that holds the booking_owner relation/edge.
	BookingOwnerTable = "bookings"
	// BookingOwnerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	BookingOwnerInverseTable = "customers"
	// BookingOwnerColumn is the table column denoting the booking_owner relation/edge.
	BookingOwnerColumn = "customer_bookings"
)

// Columns holds all SQL columns for booking fields.
var Columns = []string{
	FieldID,
	FieldTotalCost,
	FieldTotalTicket,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "bookings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"customer_bookings",
	"flight_belongs_to",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TotalCostValidator is a validator for the "total_cost" field. It is called by the builders before save.
	TotalCostValidator func(float64) error
	// DefaultTotalTicket holds the default value on creation for the "total_ticket" field.
	DefaultTotalTicket int
	// TotalTicketValidator is a validator for the "total_ticket" field. It is called by the builders before save.
	TotalTicketValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusSuccess  Status = "Success"
	StatusFail     Status = "Fail"
	StatusCanceled Status = "Canceled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusSuccess, StatusFail, StatusCanceled:
		return nil
	default:
		return fmt.Errorf("booking: invalid enum value for status field: %q", s)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
