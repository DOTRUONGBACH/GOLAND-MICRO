// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mock_project/ent/booking"
	"mock_project/ent/customer"
	"mock_project/ent/flight"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Booking is the model entity for the Booking schema.
type Booking struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TotalCost holds the value of the "total_cost" field.
	TotalCost float64 `json:"total_cost,omitempty"`
	// TotalTicket holds the value of the "total_ticket" field.
	TotalTicket int `json:"total_ticket,omitempty"`
	// Status holds the value of the "status" field.
	Status booking.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookingQuery when eager-loading is set.
	Edges             BookingEdges `json:"edges"`
	customer_bookings *uuid.UUID
	flight_belongs_to *uuid.UUID
}

// BookingEdges holds the relations/edges for other nodes in the graph.
type BookingEdges struct {
	// BookingFlight holds the value of the booking_flight edge.
	BookingFlight *Flight `json:"booking_flight,omitempty"`
	// BookingOwner holds the value of the booking_owner edge.
	BookingOwner *Customer `json:"booking_owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// BookingFlightOrErr returns the BookingFlight value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookingEdges) BookingFlightOrErr() (*Flight, error) {
	if e.loadedTypes[0] {
		if e.BookingFlight == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: flight.Label}
		}
		return e.BookingFlight, nil
	}
	return nil, &NotLoadedError{edge: "booking_flight"}
}

// BookingOwnerOrErr returns the BookingOwner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookingEdges) BookingOwnerOrErr() (*Customer, error) {
	if e.loadedTypes[1] {
		if e.BookingOwner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.BookingOwner, nil
	}
	return nil, &NotLoadedError{edge: "booking_owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Booking) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case booking.FieldTotalCost:
			values[i] = new(sql.NullFloat64)
		case booking.FieldTotalTicket:
			values[i] = new(sql.NullInt64)
		case booking.FieldStatus:
			values[i] = new(sql.NullString)
		case booking.FieldCreatedAt, booking.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case booking.FieldID:
			values[i] = new(uuid.UUID)
		case booking.ForeignKeys[0]: // customer_bookings
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case booking.ForeignKeys[1]: // flight_belongs_to
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Booking", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Booking fields.
func (b *Booking) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case booking.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				b.ID = *value
			}
		case booking.FieldTotalCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_cost", values[i])
			} else if value.Valid {
				b.TotalCost = value.Float64
			}
		case booking.FieldTotalTicket:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_ticket", values[i])
			} else if value.Valid {
				b.TotalTicket = int(value.Int64)
			}
		case booking.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				b.Status = booking.Status(value.String)
			}
		case booking.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case booking.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		case booking.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field customer_bookings", values[i])
			} else if value.Valid {
				b.customer_bookings = new(uuid.UUID)
				*b.customer_bookings = *value.S.(*uuid.UUID)
			}
		case booking.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field flight_belongs_to", values[i])
			} else if value.Valid {
				b.flight_belongs_to = new(uuid.UUID)
				*b.flight_belongs_to = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryBookingFlight queries the "booking_flight" edge of the Booking entity.
func (b *Booking) QueryBookingFlight() *FlightQuery {
	return (&BookingClient{config: b.config}).QueryBookingFlight(b)
}

// QueryBookingOwner queries the "booking_owner" edge of the Booking entity.
func (b *Booking) QueryBookingOwner() *CustomerQuery {
	return (&BookingClient{config: b.config}).QueryBookingOwner(b)
}

// Update returns a builder for updating this Booking.
// Note that you need to call Booking.Unwrap() before calling this method if this Booking
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Booking) Update() *BookingUpdateOne {
	return (&BookingClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Booking entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Booking) Unwrap() *Booking {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Booking is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Booking) String() string {
	var builder strings.Builder
	builder.WriteString("Booking(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("total_cost=")
	builder.WriteString(fmt.Sprintf("%v", b.TotalCost))
	builder.WriteString(", ")
	builder.WriteString("total_ticket=")
	builder.WriteString(fmt.Sprintf("%v", b.TotalTicket))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", b.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Bookings is a parsable slice of Booking.
type Bookings []*Booking

func (b Bookings) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
