// Code generated by ent, DO NOT EDIT.

package ent

import (
	"mock_project/ent/account"
	"mock_project/ent/booking"
	"mock_project/ent/customer"
	"mock_project/ent/flight"
	"time"

	"github.com/google/uuid"
)

// CreateAccountInput represents a mutation input for creating accounts.
type CreateAccountInput struct {
	Email      string
	Password   string
	Role       account.Role
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	AccOwnerID *uuid.UUID
}

// Mutate applies the CreateAccountInput on the AccountMutation builder.
func (i *CreateAccountInput) Mutate(m *AccountMutation) {
	m.SetEmail(i.Email)
	m.SetPassword(i.Password)
	m.SetRole(i.Role)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.AccOwnerID; v != nil {
		m.SetAccOwnerID(*v)
	}
}

// SetInput applies the change-set in the CreateAccountInput on the AccountCreate builder.
func (c *AccountCreate) SetInput(i CreateAccountInput) *AccountCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAccountInput represents a mutation input for updating accounts.
type UpdateAccountInput struct {
	Email         *string
	Password      *string
	Role          *account.Role
	UpdatedAt     *time.Time
	ClearAccOwner bool
	AccOwnerID    *uuid.UUID
}

// Mutate applies the UpdateAccountInput on the AccountMutation builder.
func (i *UpdateAccountInput) Mutate(m *AccountMutation) {
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearAccOwner {
		m.ClearAccOwner()
	}
	if v := i.AccOwnerID; v != nil {
		m.SetAccOwnerID(*v)
	}
}

// SetInput applies the change-set in the UpdateAccountInput on the AccountUpdate builder.
func (c *AccountUpdate) SetInput(i UpdateAccountInput) *AccountUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAccountInput on the AccountUpdateOne builder.
func (c *AccountUpdateOne) SetInput(i UpdateAccountInput) *AccountUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateBookingInput represents a mutation input for creating bookings.
type CreateBookingInput struct {
	TotalCost       float64
	TotalTicket     *int
	Status          booking.Status
	CreatedAt       *time.Time
	UpdatedAt       *time.Time
	BookingFlightID *uuid.UUID
	BookingOwnerID  *uuid.UUID
}

// Mutate applies the CreateBookingInput on the BookingMutation builder.
func (i *CreateBookingInput) Mutate(m *BookingMutation) {
	m.SetTotalCost(i.TotalCost)
	if v := i.TotalTicket; v != nil {
		m.SetTotalTicket(*v)
	}
	m.SetStatus(i.Status)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.BookingFlightID; v != nil {
		m.SetBookingFlightID(*v)
	}
	if v := i.BookingOwnerID; v != nil {
		m.SetBookingOwnerID(*v)
	}
}

// SetInput applies the change-set in the CreateBookingInput on the BookingCreate builder.
func (c *BookingCreate) SetInput(i CreateBookingInput) *BookingCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateBookingInput represents a mutation input for updating bookings.
type UpdateBookingInput struct {
	TotalCost          *float64
	TotalTicket        *int
	Status             *booking.Status
	UpdatedAt          *time.Time
	ClearBookingFlight bool
	BookingFlightID    *uuid.UUID
	ClearBookingOwner  bool
	BookingOwnerID     *uuid.UUID
}

// Mutate applies the UpdateBookingInput on the BookingMutation builder.
func (i *UpdateBookingInput) Mutate(m *BookingMutation) {
	if v := i.TotalCost; v != nil {
		m.SetTotalCost(*v)
	}
	if v := i.TotalTicket; v != nil {
		m.SetTotalTicket(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearBookingFlight {
		m.ClearBookingFlight()
	}
	if v := i.BookingFlightID; v != nil {
		m.SetBookingFlightID(*v)
	}
	if i.ClearBookingOwner {
		m.ClearBookingOwner()
	}
	if v := i.BookingOwnerID; v != nil {
		m.SetBookingOwnerID(*v)
	}
}

// SetInput applies the change-set in the UpdateBookingInput on the BookingUpdate builder.
func (c *BookingUpdate) SetInput(i UpdateBookingInput) *BookingUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateBookingInput on the BookingUpdateOne builder.
func (c *BookingUpdateOne) SetInput(i UpdateBookingInput) *BookingUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCustomerInput represents a mutation input for creating customers.
type CreateCustomerInput struct {
	Name        string
	CitizenID   string
	Phone       string
	Address     string
	Gender      customer.Gender
	DateOfBirth time.Time
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	AccountIDs  []uuid.UUID
	BookingIDs  []uuid.UUID
}

// Mutate applies the CreateCustomerInput on the CustomerMutation builder.
func (i *CreateCustomerInput) Mutate(m *CustomerMutation) {
	m.SetName(i.Name)
	m.SetCitizenID(i.CitizenID)
	m.SetPhone(i.Phone)
	m.SetAddress(i.Address)
	m.SetGender(i.Gender)
	m.SetDateOfBirth(i.DateOfBirth)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.AccountIDs; len(v) > 0 {
		m.AddAccountIDs(v...)
	}
	if v := i.BookingIDs; len(v) > 0 {
		m.AddBookingIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCustomerInput on the CustomerCreate builder.
func (c *CustomerCreate) SetInput(i CreateCustomerInput) *CustomerCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCustomerInput represents a mutation input for updating customers.
type UpdateCustomerInput struct {
	Name             *string
	CitizenID        *string
	Phone            *string
	Address          *string
	Gender           *customer.Gender
	DateOfBirth      *time.Time
	UpdatedAt        *time.Time
	AddAccountIDs    []uuid.UUID
	RemoveAccountIDs []uuid.UUID
	AddBookingIDs    []uuid.UUID
	RemoveBookingIDs []uuid.UUID
}

// Mutate applies the UpdateCustomerInput on the CustomerMutation builder.
func (i *UpdateCustomerInput) Mutate(m *CustomerMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.CitizenID; v != nil {
		m.SetCitizenID(*v)
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.Gender; v != nil {
		m.SetGender(*v)
	}
	if v := i.DateOfBirth; v != nil {
		m.SetDateOfBirth(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.AddAccountIDs; len(v) > 0 {
		m.AddAccountIDs(v...)
	}
	if v := i.RemoveAccountIDs; len(v) > 0 {
		m.RemoveAccountIDs(v...)
	}
	if v := i.AddBookingIDs; len(v) > 0 {
		m.AddBookingIDs(v...)
	}
	if v := i.RemoveBookingIDs; len(v) > 0 {
		m.RemoveBookingIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCustomerInput on the CustomerUpdate builder.
func (c *CustomerUpdate) SetInput(i UpdateCustomerInput) *CustomerUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCustomerInput on the CustomerUpdateOne builder.
func (c *CustomerUpdateOne) SetInput(i UpdateCustomerInput) *CustomerUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateFlightInput represents a mutation input for creating flights.
type CreateFlightInput struct {
	FlightCode    string
	From          string
	To            string
	DepartureDate time.Time
	DepartureTime time.Time
	Duration      int
	Capacity      *int
	AvailableSeat *int
	Status        flight.Status
	CreatedAt     *time.Time
	UpdatedAt     *time.Time
	BelongsToIDs  []uuid.UUID
}

// Mutate applies the CreateFlightInput on the FlightMutation builder.
func (i *CreateFlightInput) Mutate(m *FlightMutation) {
	m.SetFlightCode(i.FlightCode)
	m.SetFrom(i.From)
	m.SetTo(i.To)
	m.SetDepartureDate(i.DepartureDate)
	m.SetDepartureTime(i.DepartureTime)
	m.SetDuration(i.Duration)
	if v := i.Capacity; v != nil {
		m.SetCapacity(*v)
	}
	if v := i.AvailableSeat; v != nil {
		m.SetAvailableSeat(*v)
	}
	m.SetStatus(i.Status)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.BelongsToIDs; len(v) > 0 {
		m.AddBelongsToIDs(v...)
	}
}

// SetInput applies the change-set in the CreateFlightInput on the FlightCreate builder.
func (c *FlightCreate) SetInput(i CreateFlightInput) *FlightCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateFlightInput represents a mutation input for updating flights.
type UpdateFlightInput struct {
	FlightCode         *string
	From               *string
	To                 *string
	DepartureDate      *time.Time
	DepartureTime      *time.Time
	Duration           *int
	Capacity           *int
	AvailableSeat      *int
	Status             *flight.Status
	UpdatedAt          *time.Time
	AddBelongsToIDs    []uuid.UUID
	RemoveBelongsToIDs []uuid.UUID
}

// Mutate applies the UpdateFlightInput on the FlightMutation builder.
func (i *UpdateFlightInput) Mutate(m *FlightMutation) {
	if v := i.FlightCode; v != nil {
		m.SetFlightCode(*v)
	}
	if v := i.From; v != nil {
		m.SetFrom(*v)
	}
	if v := i.To; v != nil {
		m.SetTo(*v)
	}
	if v := i.DepartureDate; v != nil {
		m.SetDepartureDate(*v)
	}
	if v := i.DepartureTime; v != nil {
		m.SetDepartureTime(*v)
	}
	if v := i.Duration; v != nil {
		m.SetDuration(*v)
	}
	if v := i.Capacity; v != nil {
		m.SetCapacity(*v)
	}
	if v := i.AvailableSeat; v != nil {
		m.SetAvailableSeat(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.AddBelongsToIDs; len(v) > 0 {
		m.AddBelongsToIDs(v...)
	}
	if v := i.RemoveBelongsToIDs; len(v) > 0 {
		m.RemoveBelongsToIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateFlightInput on the FlightUpdate builder.
func (c *FlightUpdate) SetInput(i UpdateFlightInput) *FlightUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateFlightInput on the FlightUpdateOne builder.
func (c *FlightUpdateOne) SetInput(i UpdateFlightInput) *FlightUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
