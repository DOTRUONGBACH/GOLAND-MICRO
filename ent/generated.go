// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package ent

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AccountByIDResponse struct {
	Email    string    `json:"email"`
	Role     Role      `json:"role"`
	AccOwner *Customer `json:"accOwner"`
}

type AccountLogin struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type AccountLoginResponse struct {
	Token  string `json:"token"`
	Status bool   `json:"status"`
}

type AccountResetPasswordInput struct {
	Email           string `json:"email"`
	CurrentPassword string `json:"currentPassword"`
	NewPassword     string `json:"newPassword"`
}

type BookingInput struct {
	TotalCost   string        `json:"totalCost"`
	TotalTicket int           `json:"totalTicket"`
	Status      BookingStatus `json:"status"`
}

type CustomerInput struct {
	Name      string    `json:"name"`
	CitizenID string    `json:"citizenId"`
	Phone     string    `json:"phone"`
	Address   string    `json:"address"`
	Gender    Gender    `json:"gender"`
	Dob       time.Time `json:"dob"`
}

type FlightInput struct {
	FlightCode    string       `json:"flightCode"`
	From          string       `json:"from"`
	To            string       `json:"to"`
	DepartureDate time.Time    `json:"departureDate"`
	DepartureTime time.Time    `json:"departureTime"`
	Duration      int          `json:"duration"`
	Capacity      int          `json:"capacity"`
	AvailableSeat int          `json:"availableSeat"`
	Status        FlightStatus `json:"status"`
}

type NewAccountInput struct {
	Customer *CustomerInput `json:"customer"`
	Email    string         `json:"email"`
	Password string         `json:"password"`
	Role     Role           `json:"role"`
}

type NewBookingInput struct {
	FlightCode  string `json:"flightCode"`
	TotalTicket int    `json:"totalTicket"`
}

type NewCustomerInput struct {
	Name    string    `json:"name"`
	Phone   string    `json:"phone"`
	Address string    `json:"address"`
	Gender  Gender    `json:"gender"`
	Dob     time.Time `json:"dob"`
}

type NewFlightInput struct {
	FlightInput *FlightInput `json:"flightInput"`
}

type UpdateBookingStatusInput struct {
	ID           string        `json:"id"`
	BookingInput *BookingInput `json:"BookingInput"`
}

type UpdateFlightByFlightCodeInput struct {
	FlightInput *FlightInput `json:"flightInput"`
}

type BookingStatus string

const (
	BookingStatusSuccess BookingStatus = "Success"
	BookingStatusFail    BookingStatus = "Fail"
)

var AllBookingStatus = []BookingStatus{
	BookingStatusSuccess,
	BookingStatusFail,
}

func (e BookingStatus) IsValid() bool {
	switch e {
	case BookingStatusSuccess, BookingStatusFail:
		return true
	}
	return false
}

func (e BookingStatus) String() string {
	return string(e)
}

func (e *BookingStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BookingStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BookingStatus", str)
	}
	return nil
}

func (e BookingStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FlightStatus string

const (
	FlightStatusScheduled FlightStatus = "Scheduled"
	FlightStatusDelayed   FlightStatus = "Delayed"
	FlightStatusDeparted  FlightStatus = "Departed"
	FlightStatusArrived   FlightStatus = "Arrived"
	FlightStatusCancelled FlightStatus = "Cancelled"
)

var AllFlightStatus = []FlightStatus{
	FlightStatusScheduled,
	FlightStatusDelayed,
	FlightStatusDeparted,
	FlightStatusArrived,
	FlightStatusCancelled,
}

func (e FlightStatus) IsValid() bool {
	switch e {
	case FlightStatusScheduled, FlightStatusDelayed, FlightStatusDeparted, FlightStatusArrived, FlightStatusCancelled:
		return true
	}
	return false
}

func (e FlightStatus) String() string {
	return string(e)
}

func (e *FlightStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FlightStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FlightStatus", str)
	}
	return nil
}

func (e FlightStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Gender string

const (
	GenderMale   Gender = "Male"
	GenderFemale Gender = "Female"
	GenderOther  Gender = "Other"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderOther,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderOther:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdministrator Role = "Administrator"
	RoleSubscriber    Role = "Subscriber"
	RoleCustomer      Role = "Customer"
)

var AllRole = []Role{
	RoleAdministrator,
	RoleSubscriber,
	RoleCustomer,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdministrator, RoleSubscriber, RoleCustomer:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
